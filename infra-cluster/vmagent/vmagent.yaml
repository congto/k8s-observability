---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vmagent
  namespace: monitoring
  labels:
    app.kubernetes.io/name: vmagent
    environment: infra
    region: ap-south-1
    cluster: eks-aps1-infra-1

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vmagent
  labels:
    app.kubernetes.io/name: vmagent
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs:
  - /metrics
  - /metrics/cadvisor
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vmagent
  labels:
    app.kubernetes.io/name: vmagent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vmagent
subjects:
- kind: ServiceAccount
  name: vmagent
  namespace: monitoring

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vmagent-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: vmagent
    environment: infra
    region: ap-south-1
data:
  vmagent.yaml: |
    global:
      scrape_interval: 30s
      scrape_timeout: 10s
      external_labels:
        cluster: 'eks-aps1-infra-1'
        environment: 'infra'
        region: 'ap-south-1'
        account: 'infra-myop'
    
    scrape_configs:
      # Self-monitoring
      - job_name: 'vmagent'
        static_configs:
          - targets: ['localhost:8429']
      
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics
      
      # Kubelet cAdvisor
      - job_name: 'kubernetes-nodes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      
      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - monitoring
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            regex: node-exporter
            action: keep
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            regex: metrics
            action: keep
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: instance
        scrape_interval: 30s
      
      # Kube State Metrics
      - job_name: 'kube-state-metrics'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - monitoring
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            regex: kube-state-metrics
            action: keep
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            regex: http-metrics
            action: keep
        scrape_interval: 30s
      
      # Karpenter
      - job_name: 'karpenter'
        static_configs:
          - targets: ['karpenter-config.karpenter.svc.cluster.local:8080']
        scrape_interval: 30s
        metrics_path: /metrics
      
      # Victoria Metrics Components
      - job_name: 'victoria-metrics-components'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - monitoring
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            regex: victoria-metrics-vm-(vminsert|vmselect|vmstorage|vmauth|vmalert)
            action: keep
      
      # Kubernetes Pods with prometheus.io/scrape annotation
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vmagent
  namespace: monitoring
  labels:
    app.kubernetes.io/name: vmagent
    environment: infra
    region: ap-south-1
    cluster: eks-aps1-infra-1
spec:
  serviceName: vmagent
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vmagent
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vmagent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8429"
    spec:
      serviceAccountName: vmagent
      securityContext:                    # ADD THIS SECTION
        fsGroup: 65534
        runAsUser: 65534
        runAsNonRoot: true
      imagePullSecrets:
        - name: dockerhub-secret
      containers:
      - name: vmagent
        image: victoriametrics/vmagent:v1.116.0
        imagePullPolicy: IfNotPresent
        args:
          - -promscrape.config=/etc/vmagent/vmagent.yaml
          - -remoteWrite.url=http://victoria-metrics-vm-vminsert.monitoring.svc.cluster.local:8480/insert/0/prometheus/api/v1/write
          - -remoteWrite.tmpDataPath=/var/lib/vmagent-remotewrite
          - -remoteWrite.queues=4
          - -remoteWrite.maxDiskUsagePerURL=1073741824
          - -remoteWrite.flushInterval=5s
          - -remoteWrite.maxBlockSize=8388608
          - -promscrape.streamParse=true
          - -promscrape.suppressDuplicateScrapeTargetErrors=true
          - -memory.allowedPercent=80
          - -httpListenAddr=:8429
          - -loggerFormat=json
        ports:
          - name: http
            containerPort: 8429
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: 8429
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8429
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1
            memory: 1Gi
        volumeMounts:
          - name: config
            mountPath: /etc/vmagent
          - name: data
            mountPath: /var/lib/vmagent-remotewrite
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
      # NO tolerations needed - general-arm nodepool has no taints
      nodeSelector:
        nodepool: general-arm
        architecture: arm64
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - vmagent
              topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: vmagent-config
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: vmagent
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: gp3
        resources:
          requests:
            storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: vmagent
  namespace: monitoring
  labels:
    app.kubernetes.io/name: vmagent
    environment: infra
    region: ap-south-1
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
    - port: 8429
      targetPort: 8429
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: vmagent

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: vmagent
  namespace: monitoring
  labels:
    app.kubernetes.io/name: vmagent
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vmagent
