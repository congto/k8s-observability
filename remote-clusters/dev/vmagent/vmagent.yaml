---
# VMAgent for Stage EKS Cluster
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring-dev

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vmagent
  namespace: monitoring-dev

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vmagent
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/metrics
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources:
      - configmaps
    verbs: ["get"]
  - nonResourceURLs:
      - /metrics
      - /metrics/cadvisor
    verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vmagent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vmagent
subjects:
  - kind: ServiceAccount
    name: vmagent
    namespace: monitoring-dev

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vmagent-config
  namespace: monitoring-dev
data:
  vmagent.yaml: |
    global:
      scrape_interval: 30s
      external_labels:
        cluster: "k8s-dev-1"
        environment: "dev"
        region: "ap-south-1"
        account: "dev-myop"

    scrape_configs:
      - job_name: vmagent
        static_configs:
          - targets: ["localhost:8429"]

      - job_name: "kubernetes-apiservers"
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels:
              [
                __meta_kubernetes_namespace,
                __meta_kubernetes_service_name,
                __meta_kubernetes_endpoint_port_name,
              ]
            action: keep
            regex: default;kubernetes;https

      - job_name: "kubernetes-nodes"
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics

      - job_name: "kubernetes-nodes-cadvisor"
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor

      - job_name: 'kubelet'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - source_labels: [__meta_kubernetes_node_name]
            target_label: node
        scrape_interval: 30s
        metrics_path: /metrics

      - job_name: 'kube-state-metrics'
        kubernetes_sd_configs:
          - role: service
            namespaces:
              names: ["monitoring-dev"]
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: kube-state-metrics
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__address__]
            target_label: __address__
            regex: ([^:]+)(?::\d+)?
            replacement: $1:8080

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ["monitoring-dev"]
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: node-exporter
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: instance
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node
        scrape_interval: 30s

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vmagent
  namespace: monitoring-dev
  labels:
    app: vmagent
spec:
  serviceName: vmagent
  replicas: 1
  selector:
    matchLabels:
      app: vmagent
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: vmagent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8429"
    spec:
      serviceAccountName: vmagent
      tolerations:
        - key: "node.myoperator.co/pool"
          operator: "Equal"
          value: "dev-tools-graviton"
          effect: "NoSchedule"
        - key: "node.myoperator.co/not-ready"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      nodeSelector:
        nodepool: "dev-tools-graviton"
      containers:
        - name: vmagent
          image: victoriametrics/vmagent:v1.107.0
          args:
            - "-promscrape.config=/etc/vmagent/vmagent.yaml"
            - "-remoteWrite.tmpDataPath=/var/lib/vmagent-remotewrite"
            - "-promscrape.streamParse=true"
            - "-promscrape.suppressDuplicateScrapeTargetErrors=true"
            - "-remoteWrite.url=http://dev-cluster:devcluster-123@victoria-metrics.infra.service/insert/0/prometheus/api/v1/write"
            - "-remoteWrite.queues=4"
            - "-remoteWrite.maxDiskUsagePerURL=1073741824"
            - "-remoteWrite.flushInterval=5s"
            - "-memory.allowedPercent=80"
            - "-remoteWrite.maxBlockSize=8388608"
          ports:
            - name: http
              containerPort: 8429
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /etc/vmagent
            - name: data
              mountPath: /var/lib/vmagent-remotewrite
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
            limits:
              cpu: "1"
              memory: "1Gi"
      volumes:
        - name: config
          configMap:
            name: vmagent-config
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: gp3-expandable
        resources:
          requests:
            storage: 10Gi

